# =====================================================================
# IMPORTANT: Service Principal Required for Terraform AzureRM Backend
#
# The Azure DevOps service connection used for 'backendServiceArm' and
# 'environmentServiceName' MUST be of type 'Azure Resource Manager'
# and use 'Service principal (automatic)' or 'Service principal (manual)'.
#
# Managed Identity or User Identity will NOT work for Terraform backend init.
#
# If you see:
#   "Terraform backend initialization for AzureRM only support service principal authorization"
# then:
#   1. Go to Azure DevOps > Project Settings > Service connections.
#   2. Create a new Azure Resource Manager connection with Service Principal auth.
#   3. Name it (e.g., terraform-aks-azurerm-svc-con) and grant access to all pipelines.
#   4. Use this name for backendServiceArm/environmentServiceName in this YAML.
#
# No YAML change is needed unless you change the service connection name.
# =====================================================================

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Define Variables for Environments
variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa  

stages:
# Stage-1: Terraform Validate Stage
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          displayName: Terraform Install
          inputs:
            terraformVersion: '1.6.6'
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            backendServiceArm: 'terraform-aks-azurerm-svc-con2'
            backendAzureRmResourceGroupName: 'terraform-storage-rg'
            backendAzureRmStorageAccountName: 'terraformstatexlrwdrzs12'
            backendAzureRmContainerName: 'tfstatefiles'
            backendAzureRmKey: 'aks-base.tfstate'
        - task: TerraformCLI@0
          displayName: Terraform Validate
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            allowTelemetryCollection: false

# Stage-2: Deploy Stages for Dev & QA
- stage: DeployAKSClusters
  dependsOn: TerraformValidate
  jobs:
    # Deployment-1: Deploy Dev AKS Cluster
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
              - task: DownloadSecureFile@1
                displayName: Download SSH Key
                name: sshkey
                inputs:
                  secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
                displayName: Terraform Init
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con2'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg'
                  backendAzureRmStorageAccountName: 'terraformstatexlrwdrzs12'
                  backendAzureRmContainerName: 'tfstatefiles'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
              - task: TerraformCLI@0
                displayName: Terraform Plan
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con2'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                displayName: Terraform Apply
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con2'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false

    # Deployment-2: Deploy QA AKS Cluster
    - deployment: DeployQAAKSCluster
      displayName: DeployQAAKSCluster
      dependsOn: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(QA_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
              - task: DownloadSecureFile@1
                displayName: Download SSH Key
                name: sshkey
                inputs:
                  secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
                displayName: Terraform Init
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con2'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg'
                  backendAzureRmStorageAccountName: 'terraformstatexlrwdrzs12'
                  backendAzureRmContainerName: 'tfstatefiles'
                  backendAzureRmKey: 'aks-$(QA_ENVIRONMENT).tfstate'
              - task: TerraformCLI@0
                displayName: Terraform Plan
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con2'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(QA_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                displayName: Terraform Apply
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con2'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false

# ---
# Azure DevOps Service Principal Connection Instructions
#
# To avoid the error:
#   "Terraform backend initialization for AzureRM only support service principal authorization"
# you must use a Service Principal-based Azure Resource Manager service connection for
# 'backendServiceArm' and 'environmentServiceName' in your pipeline.
#
# Steps:
# 1. Go to Azure DevOps > Project Settings > Service connections.
# 2. Click 'New service connection' > Azure Resource Manager.
# 3. Choose 'Service principal (automatic)' or 'manual'.
# 4. Name it (e.g., terraform-aks-azurerm-svc-con) and grant access to all pipelines.
# 5. Use this name for backendServiceArm/environmentServiceName in your YAML.
#
# This ensures Terraform backend init works with AzureRM.
# ---
